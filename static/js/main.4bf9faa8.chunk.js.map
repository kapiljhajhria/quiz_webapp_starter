{"version":3,"sources":["Question/index.js","Option/index.js","ProgressBar/index.js","Quiz/index.js","Result/index.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","style","fontSize","margin","questionText","Option","onClick","clearInterval","queIndex","clicked","id","className","isCorrect","selected","active","text","ProgressBar","intervalId","state","width","color","countDown","this","setInterval","questionAnswered","moveToNextQuestion","setState","background","React","Component","Quiz","userAnswer","questions","selectThis","push","console","log","copyCurrentQuestionIndex","currentQuestionIndex","newScore","score","question","correct_choice","selectedOption","setTimeout","length","resultMapList","map","value","index","correctAnswer","options","que","history","pathname","key","Result","location","el","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4bf9faa8.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Question(props) {\n\n    return (\n        <div style={{fontSize: '48px', margin: '32px'}}>{props.questionText}</div>\n    )\n}","import React, {useState} from \"react\";\nimport './styles.css';\nimport Confetti from 'react-dom-confetti';\n\n\nexport default function Option(props) {\n    return (\n\n        <div onClick={() => {\n            clearInterval(1+props.queIndex);\n            props.clicked(props.id);\n        }}\n\n             className={props.isCorrect ? (props.selected ? \"correct-option option\" : 'option') : (props.selected ? \"wrong-option option\" : 'option')}>\n            <Confetti active={props.isCorrect && props.selected}/>\n            {props.text}\n\n        </div>\n    )\n}","import React, {useEffect, useState} from \"react\";\nimport './styles.css';\nimport props from \"../Quiz\";\n\n\nexport default class ProgressBar extends React.Component {\n    constructor() {\n        super(props);\n        this.intervalId = null;\n        this.state = {\n            width: 100,\n            color: \"green\"\n        };\n    }\n\n    componentDidMount() {\n        let countDown = 100;\n        this.intervalId = setInterval(() => {\n            if (this.props.questionAnswered) {\n                clearInterval(this.intervalId)\n            }\n            if (countDown === 0) {\n                clearInterval(this.intervalId)\n                if (typeof this.props.moveToNextQuestion === 'function') {\n                    this.props.moveToNextQuestion();\n                }\n            }\n            if (countDown < 40) {\n                this.setState({color: \"red\"})\n            }\n            countDown = countDown - 1;\n            this.setState({width: countDown})\n\n        }, 100)\n    }\n\n    componentWillUnmount() {\n        //to be executed when component unmounts\n        clearInterval(this.intervalId);\n    }\n\n    render() {\n        return (\n            <div className={\"progressBar\"}>\n                <div className=\"progress\" style={{width: this.state.width + \"%\", background: this.state.color}}>\n\n                    {this.state.width}\n                </div>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport Question from \"../Question\";\nimport Option from \"../Option\";\nimport './styles.css';\nimport ProgressBar from \"../ProgressBar\";\n\nclass Quiz extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 0,\n            selectedOption: null,\n            questionAnswered: false,\n            currentQuestionIndex: 0,\n\n        }\n    }\n\n    userAnswer = [];\n    questions = [\n        {\n            'text': \"Who is current PM of India?\",\n            'options': ['Narendra Modi', 'Rahul Gandhi', 'Manmohan Singh', 'Sonia Gandhi'],\n            'correct_choice': 0\n        },\n        {\n            'text': \"What is capital of Orissa?\",\n            'options': ['Chandigarh', 'Bhubaneshwar', 'Tripura', 'Nagaland'],\n            'correct_choice': 1\n        },\n        {\n            'text': \"In the context to India's wild life, the flying fox is a __?\",\n            'options': ['Bat', 'Vulture', 'Stok', 'Kite'],\n            'correct_choice': 0\n        },\n        {\n            'text': 'What percentage of land area should remain covered by forest to maintain Ecological balance?',\n            'options': ['10%', '33%', '5%', 'None of these'],\n            'correct_choice': 1\n        },\n        {\n            'text': ' The purest form of iron is',\n            'options': ['Wrought iron', 'Steel', 'Pig iron', 'Nickel steel'],\n            'correct_choice': 0\n        },\n        {\n            'text': 'Layer of atmosphere in which Ozone layer lies is',\n            'options': ['Exosphere', 'Mesosphere', 'Troposphere', 'Stratosphere'],\n            'correct_choice': 3\n        },\n    ];\n\n\n    selectThis = (id) => {\n        this.userAnswer.push(id);\n\n        console.log(\"clicked some option\");\n        if (!this.state.questionAnswered) {\n\n            let copyCurrentQuestionIndex = this.state.currentQuestionIndex;\n            copyCurrentQuestionIndex = copyCurrentQuestionIndex + 1;\n            console.log(`updating selectedOption to ${id}`);\n            let newScore = this.state.score;\n\n            if (id === this.question.correct_choice) {\n                newScore = newScore + 10;\n            }\n            this.setState({\n                selectedOption: id,\n                score: newScore,\n                questionAnswered: true,\n            });\n\n            setTimeout(() => {\n                if (copyCurrentQuestionIndex === this.questions.length) {\n                    let resultMapList = [];\n                    this.userAnswer.map((value, index) => {\n                        let correctAnswer = this.questions[index].options[this.questions[index].correct_choice];\n                        let userAnswer = value !== -1 ? this.questions[index].options[value] : \"time out\";\n                        resultMapList.push({\n                            que: this.questions[index][\"text\"],\n                            userAnswer: userAnswer,\n                            correctAnswer: correctAnswer,\n                        });\n                    });\n                    this.props.history.push({\n                            pathname: \"/quiz_webapp_starter/result\",\n                            state: {\n                                score: newScore,\n                                resultMapList: resultMapList\n                            }\n                        }\n                    )\n                } else {\n                    this.setState({\n                        selectedOption: null,\n                        questionAnswered: false,\n                        currentQuestionIndex: copyCurrentQuestionIndex,\n                    });\n                }\n\n            }, 2000);\n        }\n    }\n    question;\n\n    moveToNextQuestion() {\n        this.userAnswer.push(-1);\n        let copyCurrentQuestionIndex = this.state.currentQuestionIndex;\n        if (copyCurrentQuestionIndex < this.questions.length - 1)\n            copyCurrentQuestionIndex = copyCurrentQuestionIndex + 1;\n        else if (copyCurrentQuestionIndex === this.questions.length - 1) {\n            let resultMapList = [];\n            this.userAnswer.map((value, index) => {\n                let correctAnswer = this.questions[index].options[this.questions[index].correct_choice];\n                let userAnswer = value !== -1 ? this.questions[index].options[value] : \"time out\";\n                resultMapList.push({\n                    que: this.questions[index][\"text\"],\n                    userAnswer: userAnswer,\n                    correctAnswer: correctAnswer,\n                });\n            });\n            this.props.history.push({\n                pathname: \"/quiz_webapp_starter/result\",\n                state: {\n                    score: this.state.score,\n                    resultMapList: resultMapList\n                }\n            })\n        }\n        this.setState({\n            currentQuestionIndex: copyCurrentQuestionIndex,\n        });\n    }\n\n    render() {\n        this.question = this.questions[this.state.currentQuestionIndex];\n        return (\n            <div className=\"header\">\n                <div className=\"score\">Score: {this.state.score}</div>\n                <Question questionText={this.question.text}/>\n                <div className=\"options-container\">\n                    <Option queIndex={this.state.currentQuestionIndex} text={this.question.options[0]} id={0}\n                            isCorrect={this.question.correct_choice === 0}\n                            clicked={this.selectThis} selected={this.state.selectedOption === 0}/>\n                    <Option queIndex={this.state.currentQuestionIndex} text={this.question.options[1]} id={1}\n                            isCorrect={this.question.correct_choice === 1}\n                            clicked={this.selectThis} selected={this.state.selectedOption === 1}/>\n                    <Option queIndex={this.state.currentQuestionIndex} text={this.question.options[2]} id={2}\n                            isCorrect={this.question.correct_choice === 2}\n                            clicked={this.selectThis} selected={this.state.selectedOption === 2}/>\n                    <Option queIndex={this.state.currentQuestionIndex} text={this.question.options[3]} id={3}\n                            isCorrect={this.question.correct_choice === 3}\n                            clicked={this.selectThis} selected={this.state.selectedOption === 3}/>\n                </div>\n                <ProgressBar key={this.state.currentQuestionIndex} questionAnswered={this.state.questionAnswered}\n                             moveToNextQuestion={() => this.moveToNextQuestion()}\n                             queIndex={this.state.currentQuestionIndex}/>\n            </div>\n        );\n    }\n}\n\n\nexport default Quiz;\n\n","import React from \"react\";\nimport './styles.css';\n\n\nexport default function Result(props) {\n    console.log(\"result page\");\n    console.log(props.location.state.score);\n    console.log(props.location.state.resultMapList);\n    return (\n        <div className=\"resPage\">\n            <div>\n                Total Score : {props.location.state.score}\n            </div>\n            {console.log(`score is ${props}`)}\n            <table>\n                <thead>\n                <tr>\n                    <th>Question</th>\n                    <th>User Answer</th>\n                    <th>Correct Answer</th>\n                </tr>\n                </thead>\n                <tbody>\n                {props.location.state.resultMapList.map((el) =>\n\n                    (<tr>\n                        <td>{el.que}</td>\n                        <td>{el.userAnswer}</td>\n                        <td>{el.correctAnswer}</td>\n                    </tr>)\n                )}\n                </tbody>\n            </table>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport Quiz from \"./Quiz\";\nimport Result from \"./Result\";\nimport {BrowserRouter as Router, Route, Link, Switch} from \"react-router-dom\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Router>\n                    <Switch>\n                        <Route exact path=\"/quiz_webapp_starter/result\" component={Result}/>\n                        <Route path=\"/quiz_webapp_starter\" component={Quiz}/>\n                        <Route path=\"/\" component={Quiz}/>\n                    </Switch>\n                </Router>\n\n            </header>\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}